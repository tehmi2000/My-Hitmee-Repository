const socket=io();let check=!1,shouldPrompt=!1,errorD;const querystring=getQuery();let inputElement=null;const welcomeDelay=setTimeout((function(){}),9e3),playtracks={1:"images/Display-video.mp4",2:"",3:"",4:""},controlStrings=["back","restart"],userData={login:{nameList:["username","password"],data:{}},create:{nameList:["username","password","confirm-password","email","phone-number"],data:{}}};function initLogin(){errorD=get("error"),document.querySelector(".phone-body video").addEventListener("play",(function(params){})),document.querySelector("input[name='username']").addEventListener("input",(function(evt){const submitButton=document.querySelector("input[type='submit']");0==submitButton.hasAttribute("disabled")&&submitButton.setAttribute("disabled",!0)})),document.querySelector("form button").addEventListener("click",(function(evt){evt.preventDefault()})),querystring&&querystring.error&&"novalidid"==querystring.error&&(errorD.innerHTML="Incorrect password!",errorD.classList.toggle("serror",!0))}function getQuery(){let object={},queryList=window.location.search.substring(1).split("&");for(let index=0;index<queryList.length;index++)object[queryList[index].split("=")[0]]=queryList[index].split("=")[1];return object}function createComponent(elementName,value,classList){value=value||null,classList=classList||null;const component=document.createElement(elementName);return value&&(component.innerHTML=value),classList&&classList.forEach(className=>{component.classList.add(className)}),component}function joinComponent(container,...components){for(let component of components)container.appendChild(component);return container}function checkExisting(){const usernameField=get("login_user"),value=usernameField.value;if(""!=value&&0==check){socket.emit("check existing",value);const checkMembers=document.querySelectorAll("input[name='username']+button > *");forEach(checkMembers,(function(element){element.style.opacity="1"}));const i=checkMembers[0],span=checkMembers[1];i.setAttribute("class","icofont-refresh"),span.textContent="Checking...",check=!0}}let animateChats=function(elements,type){"reply"===type?gsap.from(elements,.3,{x:-200,y:"90%",stagger:.8,opacity:0}):gsap.from(elements,.3,{x:"90%",y:"90%",stagger:.8,opacity:0})},animateSlides=function(noOfSlides){let element=document.querySelector(`#slider .slide:nth-child(${noOfSlides})`);gsap.set(element,{opacity:1}),gsap.fromTo(element,.8,{opacity:.5,y:"80vh"},{opacity:1,y:"10vh",ease:"elastic.out(2, 0.3)",onComplete:function(){gsap.to(element,.6,{opacity:0,y:-40,delay:9,onComplete:function(){gsap.set(element,{transform:"unset"})}})}}),setTimeout(()=>{let nextElement=document.querySelector(`#slider .slide:nth-child(${noOfSlides+1})`);animateSlides(null==nextElement?1:noOfSlides+1)},12e3)};const createAliasedText=function(text,alias){let aliasedText="";for(let index=0;index<text.length;index++)aliasedText+=alias;return aliasedText},startChatBot=function(){replyChat("Hello, I am Hitmee. What is your username?")},createChat=function(message,alias){null!==(alias=alias||null)&&(message=createAliasedText(message,alias));let ids=[],elementId=Math.round(1e6*Math.random()),container=document.querySelector("#chat-form .chat-form-screen"),div0=createComponent("DIV",null,["chat-wrapper"]),div1;div0=joinComponent(div0,createComponent("DIV",message,["chat","sent-chat"])),div0.id=`sent_${elementId}`,container.appendChild(div0),ids.push(`#sent_${elementId}`),container.scrollTop=container.scrollHeight,animateChats(ids,"sent")},replyChat=function(message){let ids=[],create=function(container,content){let elementId=Math.round(1e6*Math.random()),div0=createComponent("DIV",null,["chat-wrapper"]),div1;div0=joinComponent(div0,createComponent("DIV",content,["chat","reply-chat"])),div0.id=`reply_${elementId}`,container.appendChild(div0),ids.push(`#reply_${elementId}`),container.scrollTop=container.scrollHeight},container=document.querySelector("#chat-form .chat-form-screen");typeof message==typeof[]?message.forEach(singleMessage=>{create(container,singleMessage)}):create(container,message),animateChats(ids,"reply")},analyseInput=function(dataValue,inputElement){let index=parseInt(inputElement.getAttribute("data-count")),type=inputElement.getAttribute("data-type");!0===(dataValue=dataValue.trim()).startsWith("/")?botCommands(dataValue,index,type):0===index?socket.emit("check existing",dataValue):mainBotLogic(index,type,dataValue)},botCommands=function(action,index,type){switch(action){case"/signup":mainBotLogic(-1,"create",null);break;case"/restart":replyChat("Okay, Let's restart!"),mainBotLogic(-1,type,null);break;case"/back":replyChat("Okay, we are going back one step!"),mainBotLogic(index-1,type,null);break;case"/about":let listOfMessages=["Wawu! Okay, seems you are getting the hang of it.","Hitmee is a instant messaging web application that helps you connect with your friends and family all over the globe","So..."];replyChat(listOfMessages),setTimeout(()=>{botCommands("/restart",index,type)},1e3*(listOfMessages.length+1));break;default:replyChat("Didn't get the command! What would you like to do?"),mainBotLogic(index-1,type,null)}},mainBotLogic=function(index,type,dataValue){let currentQuestion=userData[`${type}`].nameList[index],nextQuestion=userData[`${type}`].nameList[index+1],message=null,placeholder=null,shouldProceed=!0;if(null!=currentQuestion&&(userData[`${type}`].data[`${currentQuestion}`]=dataValue),console.log(userData),"confirm-password"===currentQuestion){let userPassword=userData.create.data.password,confirmedPassword;userPassword!==userData.create.data["confirm-password"]?(replyChat("Inputted password did not match previous password!"),mainBotLogic(index-1,"create",userPassword),shouldProceed=!1):replyChat("Yeah, perfect!")}if(!0===shouldProceed)if(void 0!==nextQuestion){switch(message=`What is your ${nextQuestion}?`,placeholder=`Type your ${nextQuestion} here...`,inputElement.setAttribute("data-count",index+1),inputElement.setAttribute("data-type",type),nextQuestion){case"username":"create"===type&&(message="What username would you like to use?"),inputElement.setAttribute("type","text");break;case"password":"login"===type&&(message=`Hey ${dataValue}, what is your ${nextQuestion}?`),"create"===type&&0===index&&(message=["That username isn't registered with us!",`Would you like to create a new account with username: <b>${dataValue}</b>?`,`If Yes, enter your preferred ${nextQuestion}.`,"If No, just type /restart"]),inputElement.setAttribute("type","password");break;case"email":inputElement.setAttribute("type","email"),message="What email address would you like to use?";break;case"confirm-password":inputElement.setAttribute("type","password"),placeholder="Type your password again here...",message="Please do confirm this password.";break;case"phone-number":inputElement.setAttribute("type","tel"),placeholder="Type your mobile number here...",message="Lastly, what is your mobile number?";break;default:inputElement.setAttribute("type","text")}inputElement.setAttribute("placeholder",placeholder),replyChat(message)}else switch(type){case"login":replyChat("Nice! I would be logging you in shortly."),authenticateUser();break;case"create":replyChat(["Thank you for signing up! I would be logging you in shortly.","Do have a wonderful time!"]),createUser();break;default:console.log("None")}inputElement.focus(),shouldProceed=!0},authenticateUser=function(count){let timeout=5*(count=count||1),apiUrl;fetch("/admin",{method:"POST",body:JSON.stringify(userData.login.data),headers:{"Content-Type":"application/json;charset=utf-8"}}).then(async response=>{try{let result=await response.json();if(200===result.statusCode&&result.redirectUrl)replyChat("HERE WE GOOOOOOOO!!!"),window.location.href=result.redirectUrl;else if(401!==result.statusCode||result.redirectUrl){let message;replyChat({try1:"Sorry dear, there was an issue logging you in. Please hold on...",try2:`Something is not right...Please do try refreshing the page or hold on for ${timeout} seconds.`}[`try${count}`]),setTimeout(()=>{authenticateUser(count+1)},timeout)}else{let index=parseInt(inputElement.getAttribute("data-count")),fieldName=userData.login.nameList[index-1],dataValue=userData.login.data[`${fieldName}`];replyChat("The password provided was invalid. Please try again!"),mainBotLogic(index-1,"login",dataValue)}}catch(error){console.error(error)}}).catch(error=>{console.error(error)})},createUser=function(count){let timeout=5*(count=count||1),apiUrl;fetch("/admin",{method:"POST",body:JSON.stringify(userData.create.data),headers:{"Content-Type":"application/json;charset=utf-8"}}).then(async response=>{try{let result=await response.json();if(200===result.statusCode&&result.redirectUrl)replyChat("HERE WE GOOOOOOOO!!!"),window.location.href=result.redirectUrl;else if(401!==result.statusCode||result.redirectUrl){let message;replyChat({try1:"Sorry dear, there was an issue logging you in. Please hold on...",try2:`Something is not right...Please do try refreshing the page or hold on for ${timeout} seconds.`}[`try${count}`]),setTimeout(()=>{createUser(count+1)},timeout)}else{let index=parseInt(inputElement.getAttribute("data-count")),fieldName=userData.create.nameList[index-1],dataValue=userData.create.data[`${fieldName}`];replyChat("The password provided was invalid. Please try again!"),mainBotLogic(index-1,"create",dataValue)}}catch(error){console.error(error)}}).catch(error=>{console.error(error)})},formHandler=function(ev){ev.preventDefault();const messageInput=inputElement;let message=messageInput.value;""!==message&&message.length>2&&("password"===messageInput.getAttribute("type")?createChat(message,"*"):createChat(message),messageInput.value="",analyseInput(message,messageInput))},switchToChatHandler=function(ev){let chatFormType=document.querySelector("#chat-type-login"),normalFormType=document.querySelector("#normal-type-login");chatFormType.classList.contains("none")&&chatFormType.classList.replace("none","cols"),normalFormType.classList.replace("cols","none")},switchToNormalHandler=function(ev){let chatFormType=document.querySelector("#chat-type-login"),normalFormType=document.querySelector("#normal-type-login");normalFormType.classList.contains("none")&&normalFormType.classList.replace("none","cols"),chatFormType.classList.replace("cols","none")},loadControllers=function(){let form=document.querySelector("#chat-form"),chatFormTypeBtn=document.querySelector("#chat-type-login .element-btn"),normalFormTypeBtn=document.querySelector("#normal-type-login .element-btn");form.addEventListener("submit",formHandler),chatFormTypeBtn.addEventListener("click",switchToNormalHandler),normalFormTypeBtn.addEventListener("click",switchToChatHandler),startChatBot()};socket.on("loginError",(function(data){console.log(data)})),socket.on("existing",(bool,dataValue)=>{let index=parseInt(inputElement.getAttribute("data-count"));check=!1,shouldPrompt=!1,mainBotLogic(index,!0===bool?"login":"create",dataValue)}),document.addEventListener("DOMContentLoaded",(function(ev){document.querySelectorAll("#slider .slide").forEach(el=>{el.classList.add("js-enabled")}),loadControllers(),animateSlides(1),inputElement=document.querySelector("#chat-form .chat-form-controls #login-credentials")}));